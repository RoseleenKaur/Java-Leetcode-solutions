/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head==null)
            return null;
        HashMap<Integer,Node> map=new HashMap<>();
        Node temp=head.next,newhead=new Node(head.val);
        head.val=0;
        int id=1;
        Node newtemp=newhead;
        while(temp!=null){
            newtemp.next=new Node(temp.val);
            temp.val=id;
            newtemp=newtemp.next;
            temp=temp.next;
            
            map.put(id,newtemp);
            id++;
        }
        map.put(0,newhead);
        newtemp.next=null;
        temp=head; newtemp=newhead;
        int item;
        while(temp!=null){
            if(temp.random==null)
                newtemp.random=null;
            else{
            item=temp.random.val;
            newtemp.random=map.get(item);
            }
            newtemp=newtemp.next;
            temp=temp.next;
        }
        return newhead;
    }
}
