class Solution {
    WeightedQuickUnionUF uf;
    public int[] hitBricks(int[][] grid, int[][] hits) {
        int[] result = new int[hits.length];
        int[][] gridcopy=new int[grid.length][];

        for(int i=0;i<grid.length;i++){
            gridcopy[i]=new int[grid[i].length];
            System.arraycopy(grid[i],0,gridcopy[i],0,grid[i].length);
        }

        for (int i = 0; i < hits.length; i++) {
            int counter = 0;
            int k = hits[i][0];
            int v = hits[i][1];
            if (grid[k][v] == 1) {
                grid[k][v] = 0;
            }
        }
        uf=formConnectedComp(grid);

        for (int i = hits.length-1; i>=0; i--) {
            int counter = 0;
            int k = hits[i][0];
            int v = hits[i][1];
            if(gridcopy[k][v]==0){
                result[i]=0;
                continue;
            }
            result[i]=checkneighborCC(grid,k,v);
        }
        return result;
    }
    private int checkneighborCC(int[][] grid, int i, int j){
        int m=grid.length;
        int n=grid[0].length;
        int fallenballoon=0;
        boolean connectedToTopRow=false;
        if (i >= 1 && grid[i - 1][j] == 1) {
            if(!connectedToFirstRow((i - 1) * n+ j+1,grid))
            {
                fallenballoon+=uf.sizeOf((i - 1) * n + j+1);

            }
            else
                connectedToTopRow=true;
            uf.union((i - 1) * n + j+1,i*n+j+1);

        }
        if (i < grid.length - 1 && grid[i + 1][j] == 1) {
            if(!connectedToFirstRow((i + 1) * n + j+1,grid))
            {
                if(!(i >= 1 &&uf.connected((i - 1) * n + j+1,(i + 1) * n + j+1)))
                    fallenballoon+=uf.sizeOf((i + 1) * n + j+1);
            }
            else
                connectedToTopRow=true;
            uf.union((i+1) * n + j+1,i*n+j+1);
        }
        if (j >= 1 && grid[i][j - 1] == 1) {
            if(!connectedToFirstRow((i ) * n + j-1+1,grid))
            {
                if(!(i < grid.length - 1 && uf.connected((i ) * n + j-1+1,(i + 1) * n + j+1) || i >= 1 && uf.connected((i ) * n + j-1+1,(i - 1) * n + j+1)))
                    fallenballoon+=uf.sizeOf((i) * n + j-1+1);
            }
            else
                connectedToTopRow=true;
            uf.union((i ) * n + j-1+1,i*n+j+1);
        }
        if (j < grid[0].length - 1 && grid[i][j + 1] == 1) {
            if(!connectedToFirstRow((i) * n + j+1+1,grid))
            {
                if(!(j >= 1&&uf.connected((i) * n + j+1+1,(i ) * n + j-1+1)|| i < grid.length - 1 &&uf.connected((i) * n + j+1+1,(i + 1) * n + j+1)
                        || i >= 1&& uf.connected((i) * n + j+1+1,(i - 1) * n + j+1)))
                {
                    fallenballoon+=uf.sizeOf((i) * n + j+1+1);
                }
            }
            else
                connectedToTopRow=true;
            uf.union((i) * n + j+1+1,i*n+j+1);
        }
        grid[i][j]=1;
        if(!connectedToTopRow && i!=0){
            return 0;
        }
        return fallenballoon;
    }
    private boolean connectedToFirstRow(int vertex, int[][] grid){
        for(int i=0;i<grid[0].length;i++){
            if(uf.connected(vertex,i+1))
                return true;
        }
        return false;
    }

    private WeightedQuickUnionUF formConnectedComp(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        WeightedQuickUnionUF uf = new WeightedQuickUnionUF(m*n+1);
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1) {
                    if (i >= 1 && grid[i - 1][j] == 1) {
                        uf.union((i - 1) * n + j+1, i * n + j+1);
                    }
                    if (i < grid.length - 1 && grid[i + 1][j] == 1) {

                        uf.union((i + 1) * n + j+1, i * n + j+1);
                    }
                    if (j >= 1 && grid[i][j - 1] == 1) {
                        uf.union(i * n + j - 1+1, i * n + j+1);
                    }
                    if (j < grid[0].length - 1 && grid[i][j + 1] == 1) {
                        uf.union(i * n + j + 1+1, i * n + j+1);
                    }
                }
            }
        }
        return uf;
    }
}
  class WeightedQuickUnionUF {
    private int[] parent;   // parent[i] = parent of i
    private int[] size;     // size[i] = number of sites in subtree rooted at i
    private int count;      // number of components

    public int sizeOf(int vertex){
        return size[find(vertex)];
    }
    /**
     * Initializes an empty unionâ€“find data structure with {@code n} sites
     * {@code 0} through {@code n-1}. Each site is initially in its own 
     * component.
     *
     * @param  n the number of sites
     * @throws IllegalArgumentException if {@code n < 0}
     */
    public WeightedQuickUnionUF(int n) {
        count = n;
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    /**
     * Returns the number of components.
     *
     * @return the number of components (between {@code 1} and {@code n})
     */
    public int count() {
        return count;
    }

    /**
     * Returns the component identifier for the component containing site {@code p}.
     *
     * @param  p the integer representing one object
     * @return the component identifier for the component containing site {@code p}
     * @throws IllegalArgumentException unless {@code 0 <= p < n}
     */
    public int find(int p) {
        validate(p);
        while (p != parent[p])
            p = parent[p];
        return p;
    }

    // validate that p is a valid index
    private void validate(int p) {
        int n = parent.length;
        if (p < 0 || p >= n) {
            throw new IllegalArgumentException("index " + p + " is not between 0 and " + (n-1));
        }
    }

    /**
     * Returns true if the the two sites are in the same component.
     *
     * @param  p the integer representing one site
     * @param  q the integer representing the other site
     * @return {@code true} if the two sites {@code p} and {@code q} are in the same component;
     *         {@code false} otherwise
     * @throws IllegalArgumentException unless
     *         both {@code 0 <= p < n} and {@code 0 <= q < n}
     */
    public boolean connected(int p, int q) {
        return find(p) == find(q);
    }

    /**
     * Merges the component containing site {@code p} with the 
     * the component containing site {@code q}.
     *
     * @param  p the integer representing one site
     * @param  q the integer representing the other site
     * @throws IllegalArgumentException unless
     *         both {@code 0 <= p < n} and {@code 0 <= q < n}
     */
    public void union(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);
        if (rootP == rootQ) return;

        // make smaller root point to larger one
        if (size[rootP] < size[rootQ]) {
            parent[rootP] = rootQ;
            size[rootQ] += size[rootP];
        }
        else {
            parent[rootQ] = rootP;
            size[rootP] += size[rootQ];
        }
        count--;
    }


    /**
     * Reads in a sequence of pairs of integers (between 0 and n-1) from standard input, 
     * where each integer represents some object;
     * if the sites are in different components, merge the two components
     * and print the pair to standard output.
     *
     * @param args the command-line arguments
     */
}


/******************************************************************************
 *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
 *
 *  This file is part of algs4.jar, which accompanies the textbook
 *
 *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne,
 *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X.
 *      http://algs4.cs.princeton.edu
 *
 *
 *  algs4.jar is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  algs4.jar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with algs4.jar.  If not, see http://www.gnu.org/licenses.
 ******************************************************************************/
