class Solution {
    int[] memo;
    public int mincostTickets(int[] days, int[] costs) {
        memo=new int[days.length];
        return mincostTickets(days,costs,0);
    }
    public int mincostTickets(int[] days, int[] costs,int index){
        if(index>=days.length)
            return 0;
        if(memo[index]!=0)
            return memo[index];
        int day=days[index];
        int id1=day,id7=day+6,id30=day+29;
        int flag1=0,flag7=0,flag30=0;
        int val1=0,val7=0,val30=0;
        for(int i=index;i<days.length;i++){
            if(days[i]>id1 && flag1==0){
                val1=mincostTickets(days,costs,i);
                flag1=1;
            }
            if(days[i]>id7 && flag7==0){
                val7=mincostTickets(days,costs,i);
                flag7=1;
            }
            if(days[i]>id30 && flag30==0){
                val30=mincostTickets(days,costs,i);
                flag30=1;
                break;
            }
        }
        memo[index]= Math.min(Math.min(costs[0]+val1,costs[1]+val7),costs[2]+val30);
        return memo[index];
    }
}
