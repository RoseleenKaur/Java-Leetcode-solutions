class Solution {
    
   
    public boolean checkSubarraySum(int[] nums, int k) {
       // int[] csum=new int[nums.length];
       /* if(nums.length==2 && k!=0)
        {
            return(nums[0]+nums[1])%k==0;
        }
        if(nums.length==2 && k==0)
        {
            return(nums[0]+nums[1])==0;
        }*/
        int sum=0,count=0,id=-1;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,0);
        for(int i=1;i<=nums.length;i++)
        {
            sum+=nums[i-1];
           // csum[i]=sum;
            if(k!=0 &&map.containsKey(sum%k)){
                if(i-map.get(sum%k)>=2)
                    return true;
            }
            else if(k!=0)
                map.put(sum%k,i);
            
            if(k==0 &&map.containsKey(sum)){
                if(i-map.get(sum)>=2)
                    return true;
            }
            else if(k==0)
                map.put(sum,i);
            
               
        }
        return false;
        
    }
    
}
