/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null)
            return null;
        Queue<Node> queue=new LinkedList<>();
        Map<Node,Integer> map=new HashMap<>();
        
        queue.add(root);
        int count=0;
        map.put(root,0);
        Node prev=null;
        while(!queue.isEmpty()){
            Node temp=queue.remove();
            
            int dist=map.get(temp);
            if(prev!=null && map.get(prev)==dist)
                prev.next=temp;
            if(temp.left!=null)
             queue.add(temp.left);
            if(temp.right!=null)
                queue.add(temp.right);
            map.put(temp.left,dist+1);
            map.put(temp.right,dist+1);
            prev=temp;            
        }
        return root;
    }
}
